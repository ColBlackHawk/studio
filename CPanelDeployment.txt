Read here before you start:

Check cPanel: Log in to your cPanel and look for "Setup Node.js App," "Node.js Selector," or a similar option, usually under the "Software" section. 
If it's not there, your hosting plan might not support it directly, and you'd need to explore other deployment methods or contact your host.

Build Your App Locally:
Open your project terminal.
update local next.config.ts with hostname: 'yourhost.com',
Run the command: npm run build
This will create an optimized production build of your Next.js app in a .next folder.
Prepare Files for Upload: You'll need to upload a .zip file (or individual files/folders) containing:
The entire .next folder (critical for the production build).
The public folder (for static assets like images).
package.json
package-lock.json (or yarn.lock if you use Yarn).
next.config.ts (or next.config.js).
Do NOT upload your local node_modules folder. It's better to install them on the server.
Deployment Steps using "Setup Node.js App":

Upload Your Project Files:

Log in to your cPanel.
Go to "File Manager."
Navigate to the directory where you want to deploy your app (e.g., public_html/tournamentbracket or a dedicated subdomain's root like tournamentbracket.yourdomain.com). It's often cleaner to use a subdirectory or a subdomain. Create a new folder if needed.
Upload the .zip file containing your prepared project files and then extract it in the File Manager. Alternatively, upload the individual files and folders listed above.
Configure the Node.js Application in cPanel:


const { createServer } = require('http');
const { parse } = require('url');
const next = require('next');

const dev = process.env.NODE_ENV !== 'production';
const app = next({ dev, dir: __dirname }); // Ensure dir points to your app's root
const handle = app.getRequestHandler();
const port = process.env.PORT || 3000; // cPanel usually sets the PORT environment variable

app.prepare().then(() => {
  createServer((req, res) => {
    const parsedUrl = parse(req.url, true);
    handle(req, res, parsedUrl);
  }).listen(port, (err) => {
    if (err) throw err;
    console.log(`> Ready on http://localhost:${port}`);
  });
});
If you use this, set "Application startup file" to server.js.
However, try without this first. Many cPanel Node.js setups are sophisticated enough to use the npm start command defined in your package.json, which is next start. Your package.json should ideally be: "start": "next start -p $PORT" to respect the port cPanel assigns. If it's not, edit package.json and re-upload.
Set Environment Variables (if needed):

After creating the application, you should see an option to add environment variables.
NODE_ENV should already be production (due to the application mode).
The PORT variable is usually injected by cPanel. Your next start command (in package.json or server.js) should use it (e.g., next start -p $PORT).
Add any other custom environment variables your application requires.
Install Dependencies:

In the Node.js app interface in cPanel, there should be a button like "Run NPM Install" or "Install Dependencies." Click this. It will read your package.json and package-lock.json to install the necessary modules in the node_modules folder on the server.
Start the Application:

Once dependencies are installed, click the "Start App" or "Restart" button.
Test Your Application:

Open the Application URL you configured in your browser.
Check the cPanel logs for your Node.js application if you encounter any errors. These logs are usually accessible from the "Setup Node.js App" interface.
Important Considerations for Next.js:

.htaccess for Routing: The "Setup Node.js App" feature in cPanel often configures Apache (if it's the front-end web server) to correctly proxy requests to your Node.js application. This usually means you do not need custom .htaccess rules for basic Next.js routing to work. Adding generic SPA .htaccess rules might even conflict. Only add them if you experience routing issues and your host's documentation suggests it.
Server-Side Features: Since you're deploying the full Next.js app (not a static export), server components, API routes, and Genkit flows (if they are server-side) should work provided the Node.js environment is set up correctly.
Memory/CPU Limits: Shared cPanel hosting has resource limits. If your Next.js app is resource-intensive, it might struggle. Monitor performance and check your hosting plan's limitations.
Phusion Passenger: Some cPanel setups use Phusion Passenger to run Node.js apps. The "Setup Node.js App" interface usually abstracts this away, but it's good to be aware of if you delve into logs.
This guide should help you get started. The exact labels and options in cPanel can vary slightly between hosting providers, but the general principles will be the same. Always refer to your hosting provider's documentation for specific instructions if available.